grammar ontology;

file_               : package+ EOF;
package             : PACKAGE name_ LBRACE types? class_* enum_* rel? comm* RBRACE;
types               : TYPES LBRACE (type_name COMMA)* type_name RBRACE;
class_              : CLASS name_ LBRACE attr* oper* RBRACE;
enum_               : ENUMERATION name_ LBRACE (string COMMA)* string RBRACE;
rel                 : (act | assoc | gen | aggr | comp | dep | impl)+;
comm                : COMMENT name_ string SEMICOLON;
act                 : ACTIVITY name_ LBRACE arg+ res+ RBRACE;
assoc               : ASSOCIATION name_ LBRACE m_arg m_res attr* RBRACE;
gen                 : GEN name_ LBRACE arg+ res attr* RBRACE;
aggr                : AGGREGATION name_ LBRACE m_arg+ m_res+ RBRACE;
comp                : COMPOSITION name_ (LBRACKET string COMMA string RBRACKET)* SEMICOLON;
dep                 : DEPENDENCY name_ SEMICOLON;
impl                : IMPLEMENTATION name_ SEMICOLON;
attr                : ATTRIBUTES type_name name_ SEMICOLON;
oper                : OPERATIONS (string COMMA)* string SEMICOLON;
arg                 : ARGUMENT type_name? name_ SEMICOLON;
res                 : RESULT type_name? name_ SEMICOLON;
m_arg               : ARGUMENT type_name? name_ mult? SEMICOLON;
m_res               : RESULT type_name? name_ mult? SEMICOLON;
mult                : LSBRACE mult_cnt RSBRACE;
in_                 : INPUT (name_ COMMA)* name_ SEMICOLON;
out_                : OUTPUT (name_ COMMA)* name_ SEMICOLON;
enum_literals       : LITERALS (string COMMA)* string SEMICOLON;
type_name           : TYPE_NAME;
name_               : NAME_;
mult_cnt            : MULT;
string              : STRING;

MULT                : ('0' | '1' | '*' | '0..1' | '1..*');
NAME_               : LTBRACE SYM RTBRACE;
TYPE_NAME           : APOSTROPHE SYM APOSTROPHE;
STRING              : DQUOTE SYM DQUOTE;
PACKAGE             : 'package';
TYPES               : 'types';
CLASS               : 'class';
ENUMERATION         : 'enum';
ACTIVITY            : 'act';
ASSOCIATION         : 'assoc';
GEN                 : 'gen';
ATTRIBUTES          : 'attr';
OPERATIONS          : 'operations';
AGGREGATION         : 'aggr';
COMPOSITION         : 'composition';
DEPENDENCY          : 'dependency';
IMPLEMENTATION      : 'implementation';
INPUT               : 'input';
OUTPUT              : 'output';
LITERALS            : 'literals';
COMMENT             : 'comm';
ARGUMENT            : 'arg';
RESULT              : 'res';
LBRACKET            : '(';
RBRACKET            : ')';
LBRACE              : '{';
RBRACE              : '}';
LSBRACE             : '[';
RSBRACE             : ']';
LTBRACE             : '<';
RTBRACE             : '>';
DQUOTE              : '"';
COLON               : ':';
COMMA               : ',';
APOSTROPHE          : '\'';
SEMICOLON           : ';';
fragment SYM        : ('\u0410'..'\u044F' | 'A'..'Z' | 'a'..'z' | '0'..'9' | ' ' | '-' | '.')*; 

SPACE               : [ \t\r\n] -> skip;